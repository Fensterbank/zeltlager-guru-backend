# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AuthCredentialsDto {
  username: String!
  password: String
  permissionLevel: String!
}

type AuthUser {
  id: Int!
  username: String!
  permissionLevel: String!
  accessToken: String!
}

type Camp {
  id: Int!
  name: String!
  description: String!
  url: String
  teamCount: Int
  kidsCount: Int
  minAge: Int!
  maxAge: Int!
  organisation: Organisation!
  campEvents: [CampEvent!]!
  picture: Picture
}

input CampDto {
  name: String!
  description: String!
  url: String
  teamCount: Int
  kidsCount: Int
  minAge: Int
  maxAge: Int
  organisationID: Int!
  pictureID: String
}

type CampEvent {
  id: Int!
  name: String!
  description: String
  url: String
  motto: String
  begin: DateTime!
  end: DateTime!
  teamCount: Int
  kidsCount: Int
  camp: Camp!
  campground: Campground!
  picture: Picture
}

input CampEventDto {
  name: String!
  description: String
  url: String
  motto: String
  begin: DateTime!
  end: DateTime!
  teamCount: Int
  kidsCount: Int
  campID: Int!
  campgroundID: Int
  campground: CampgroundDto
  pictureID: String
}

type Campground {
  id: Int!
  name: String!
  description: String
  url: String
  location: Location!
  campevents: [CampEvent!]!
  picture: Picture
}

input CampgroundDto {
  name: String!
  description: String
  url: String
  locationID: Int
  pictureID: String
  zip: String
  city: String
  address: String
  lat: Float
  lng: Float
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Location {
  id: Int!
  zip: String!
  address: String
  city: String!
  lat: Float!
  lng: Float!
  organisations: [Organisation!]!
}

type Mutation {
  signIn(password: String!, username: String!): AuthUser!
  createUser(data: AuthCredentialsDto!): AuthUser!
  updateUser(data: AuthCredentialsDto!, id: Int!): AuthUser!
  deleteUser(id: Int!): Boolean!
  createCampground(data: CampgroundDto!): Campground!
  updateCampground(data: CampgroundDto!, id: Int!): Campground!
  deleteCampground(id: Int!): Boolean!
  createOrganisation(data: OrganisationDto!): Organisation!
  updateOrganisation(data: OrganisationDto!, id: Int!): Organisation!
  deleteOrganisation(id: Int!): Boolean!
  createCamp(data: CampDto!): Camp!
  updateCamp(data: CampDto!, id: Int!): Camp!
  deleteCamp(id: Int!): Boolean!
  createCampEvent(data: CampEventDto!): CampEvent!
  updateCampEvent(data: CampEventDto!, id: Int!): CampEvent!
  deleteCampEvent(id: Int!): Boolean!
}

type Organisation {
  id: Int!
  name: String!
  description: String
  url: String
  religion: String!
  location: Location!
  camps: [Camp!]
  picture: Picture
}

input OrganisationDto {
  name: String!
  description: String
  url: String
  religion: String
  locationID: Int
  pictureID: String
  zip: String
  city: String
  address: String
}

type Picture {
  id: String!
  filename: String!
}

type Query {
  users: [AuthUser!]!
  currentUser: AuthUser!
  campground(id: Int!): Campground!
  campgrounds(search: String!, skip: Int, take: Int): [Campground!]!
  organisation(id: Int!): Organisation!
  organisations(search: String!, skip: Int, take: Int): [Organisation!]!
  camp(id: Int!): Camp!
  camps(search: String!, skip: Int, take: Int): [Camp!]!
  campevent(id: Int!): CampEvent!
  campevents(search: String!, skip: Int, take: Int): [CampEvent!]!
}

type User {
  id: Int!
  username: String!
  password: String!
  salt: String!
  permissionLevel: String
}
